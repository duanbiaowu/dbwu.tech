
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>软件工程 on 蛮荆</title>
   <link>https://dbwu.tech/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</link>
   <description>Recent content in 软件工程 on 蛮荆</description>
   <generator>Hugo -- gohugo.io</generator>
   <copyright>codean.net@gmail.com</copyright>
   <lastBuildDate>Fri, 24 Feb 2023 00:00:00 +0800</lastBuildDate>
   
       <atom:link href="https://dbwu.tech/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>技术文章配图指南</title>
       <link>https://dbwu.tech/posts/image_tool/</link>
       <pubDate>Tue, 04 Apr 2023 00:00:00 +0800</pubDate>
       
       <guid>https://dbwu.tech/posts/image_tool/</guid>
       <description>为什么技术文章需要配图？一图胜千言。</description>
     </item>
   
     <item>
       <title>ChatGPT 初体验</title>
       <link>https://dbwu.tech/posts/chatgpt/</link>
       <pubDate>Mon, 03 Apr 2023 00:00:00 +0800</pubDate>
       
       <guid>https://dbwu.tech/posts/chatgpt/</guid>
       <description>概述 ChatGPT 从 2 月份热度一直持续到现在，并且在接下来的一段时间内，热度还会持续下去。笔者从 3 月初开始慢慢接触，从最初的在 搜索引擎 和 ChatGPT 之间来回切换并验证， 到目前的简单搜索场景 80% 的时间都是直接用 ChatGPT 的，本文总结下这一个月的时间，笔者用到的最多的 4 个功能。</description>
     </item>
   
     <item>
       <title>Go 内存模型</title>
       <link>https://dbwu.tech/posts/memory_model/</link>
       <pubDate>Fri, 24 Feb 2023 00:00:00 +0800</pubDate>
       
       <guid>https://dbwu.tech/posts/memory_model/</guid>
       <description>为什么要学习 Go 内存模型？ 因为这是理解和掌握 Go 并发编程的基础，也是学习 Go 标准库底层源码实现的前提。</description>
     </item>
   
     <item>
       <title>版本语义化</title>
       <link>https://dbwu.tech/posts/version_semantics/</link>
       <pubDate>Fri, 24 Feb 2023 00:00:00 +0800</pubDate>
       
       <guid>https://dbwu.tech/posts/version_semantics/</guid>
       <description></description>
     </item>
   
     <item>
       <title>Go 1.20 发布了</title>
       <link>https://dbwu.tech/posts/go1.20/</link>
       <pubDate>Sat, 11 Feb 2023 00:00:00 +0800</pubDate>
       
       <guid>https://dbwu.tech/posts/go1.20/</guid>
       <description>前言 这几天所有的热度都集中到了 ChatGPT，不过我对这件事情没有什么兴趣，原本计划换换脑，看一下 Docker 基础相关技术，恰巧这时 兔兔大佬 发来了灵魂拷问 &amp;hellip;</description>
     </item>
   
     <item>
       <title>Go 逃逸分析</title>
       <link>https://dbwu.tech/posts/goland_escape/</link>
       <pubDate>Fri, 03 Feb 2023 00:00:00 +0800</pubDate>
       
       <guid>https://dbwu.tech/posts/goland_escape/</guid>
       <description>Go 语言的编译器使用逃逸分析决定哪些变量分配在栈上，哪些变量分配在堆上。</description>
     </item>
   
     <item>
       <title>Go 数据竞态</title>
       <link>https://dbwu.tech/posts/golang_data_race/</link>
       <pubDate>Thu, 02 Feb 2023 00:00:00 +0800</pubDate>
       
       <guid>https://dbwu.tech/posts/golang_data_race/</guid>
       <description>数据竞态是并发系统编程中最常见和最难调试的错误类型之一。当两个 goroutine 同时访问同一个变量并且至少有一个是写入操作时，就会发生数据竞态。</description>
     </item>
   
     <item>
       <title>Go 如何实现 implements 功能</title>
       <link>https://dbwu.tech/posts/golang_implements/</link>
       <pubDate>Tue, 31 Jan 2023 00:00:00 +0800</pubDate>
       
       <guid>https://dbwu.tech/posts/golang_implements/</guid>
       <description>Go 语言中检测一个类型是否实现了某个接口，通常分为两类机制: 编译期间和运行期间</description>
     </item>
   
     <item>
       <title>Go 的面向对象编程</title>
       <link>https://dbwu.tech/posts/golang_oop/</link>
       <pubDate>Mon, 30 Jan 2023 00:00:00 +0800</pubDate>
       
       <guid>https://dbwu.tech/posts/golang_oop/</guid>
       <description>Go 语言如何实现封装、继承、多态等面向对象的特性？</description>
     </item>
   
 </channel>
</rss>
